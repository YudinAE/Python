"""===========================================================================================
1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.
==========================================================================================="""
# Добавление функции user_division из модуля Functions

from Functions import user_division

if __name__ == '__main__':
    # ========== Будет напечатано при вызове Task01
    print('Задание 1 урок 3. Функция деления двух чисел.')

while True:
    try:
        # ========== Ввод кортежа с клавиатуры с помощью функции eval ==========
        input_patterns = (a, b) = eval(
            input('Введите делимое(dividend) и делитель(divider) через запятую (Например: 10,5) >>> '))
        # ========== Расчет частного с помощью пользовательской функции user_division из модуля Functions ==========
        quotient = user_division(*input_patterns)
        # ========== Вывод результата ==========
        print(f'Результа: {quotient}')
        # ========== Окончание или дальнейший расчет ==========
        end_of_input = input('Повторить расчет частного? (y/n) >>> ')
        if end_of_input.lower() == 'n':
            break
    # ==================== Обработка exception типов SyntaxError и ValueError
    except (SyntaxError, ValueError, NameError):
        print('Введены некорректные данные. Повторите ввод.')
        end_of_input = input('Повторить расчет частного? (y/n) >>> ')
        if end_of_input.lower() == 'n':
            break
        continue
    # ==================== Обработка exception тип ZeroDivisionError
    except ZeroDivisionError:
        print('Попытка деления на ноль')
        end_of_input = input('Повторить расчет частного? (y/n) >>> ')
        if end_of_input.lower() == 'n':
            break
