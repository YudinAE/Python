"""======================= Модуль с функциями =======================
Функции по всем заданиям урока 3 вынесены в отдельный модуль
Каждая функция подключается непосредственно в задании с помощью инструкций from и import
====================================================================="""
# ========== Добавление абстрактного типа данных number_types: int, float, complex numbers
import number_types as number_types


# number_types = (int, float, complex)

# ========== Функция нахождения частного ==========
def user_division(dividend: number_types, divider: number_types) -> number_types:
    """
    Делит число на число
    :param dividend: Делимое
    :param divider: Делитель
    :return: Частное от деления
    """
    return dividend / divider


# ========== Функция вывода информации по пользователю (вариант 1) ==========
def print_user_data(**user_data) -> None:
    """ Распечатывает в одну строку данные пользователя
    :param user_data: данные пользователя
    """
    print(f'ИМЯ: {user_data.get("name")}; ФАМИЛИЯ: {user_data.get("surname")}; '
          f'ГОД РОЖДЕНИЯ: {user_data.get("birth_year")}; ГОРОД ПРОЖИВАНИЯ: {user_data.get("city")}; '
          f'EMAIL: {user_data.get("email")}; ТЕЛЕФОН: {user_data.get("phone")}')


# ========== Функция вывода информации по пользователю (вариант 2) ==========
def print_user_data_input(**user_data):
    """ Выводим в одну строку данные пользователя
    :param user_data: данные пользователя
    """
    return list(user_data.values())


# ========== Функция удаления минимального элемента из списка и суммирования двух наибольших элементов ==========
def user_sum_double_element(a, b, c):
    """
    Функция суммирования двух наибольших элементов списка из 3х
    :param a: первый элемент списка
    :param b: второй элемент списка
    :param c: третий элемент списка
    :return: сумма двух наибольших элементов списка
    """
    user_list = [a, b, c]
    user_list.remove(min(a, b, c))
    return sum(user_list)

# ========== Функция возведения в степень с помощью оператора ** ==========
def exponentiation(x, y):
    """
    Функция возведения в степень с помощью оператора **
    :param x: действительное положительное число, возводимое в степень
    :param y: целое отрицательное число, являющие степенью
    :return: возведение в отрицательную степень
    """
    return 1 / x ** abs(y)

# ========== Функция возведения в степень без оператора **, предусматривающая использование цикла ==========
def exponentiation_cycle(x, y):
    """
    Функция возведения в степень без оператора **, предусматривающая использование цикла
    :param x: действительное положительное число, возводимое в степень
    :param y: целое отрицательное число, являющие степенью
    :return: возведение в отрицательную степень
    """
    exponentiation = 1
    for i in range(0, abs(y)):
        exponentiation *= x
    if y >= 0:
        return exponentiation
    else:
        return 1 / exponentiation

def int_func(text):
    """
    Функция вывода исходной строки, где каждое слово должно начинаться с заглавной буквы.
    :param text: Строка из слов, разделенных пробелом
    :return: Вывод сходной строки, где каждое слово должно начинаться с заглавной буквы
    """
    user_list = []
    for i in range(len(text)):
        user_list.append(text[i][0:1].title() + text[i][1:])
    return ' '.join(user_list)

